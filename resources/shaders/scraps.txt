//luma might be useful for weighing color?
float luma(vec3 color) {
  return dot(color, vec3(0.299, 0.587, 0.114));
}

float luma(vec4 color) {
  return dot(color.rgb, vec3(0.299, 0.587, 0.114));
}

vec2 UnJitter(in vec2 uvPos, uint frames, bool current, float depth)
{
	float deltaWidth = 1.0 / resolution.x;
	float deltaHeight = 1.0 / resolution.y;

	vec4 unJitteredPos = vec4(0);
	vec2 jitter = vec2(0);

	vec2 screenPos = uvPos;
	//uvs are in 0-1 range, so need to move it into screen space(-1 to 1)
	screenPos = uvPos * 2 - 1;
	float newDepth = depth * 2 - 1;//move depth to screen space as well
	//now use screenPos to get position in world space
	vec4 worldPos = inverse(previousProjection * currentView * previousTranslation) * vec4(screenPos, newDepth, 1);
	// can't use the current one since its orthographic. also projection never changes
	
	uint index = frames % numSamples;
    jitter = vec2(haltonSequence[index].x * deltaWidth, haltonSequence[index].y * deltaHeight);

	if(current)
	{
		//use the new projection to remove jitter
		unJitteredPos = previousProjection * currentView * previousTranslation * worldPos;	
	}

	else
	{
		//use the new projection to remove jitter
		unJitteredPos = previousProjection * previousView * previousTranslation * worldPos;
	}

	//now move it all back to UV space
	unJitteredPos.xy = (unJitteredPos.xy / newDepth) * 0.5 + 0.5; //i think depth should be in screen space too
	return unJitteredPos.xy;
}

vec4 CustomResolve(in vec4 preNeighborColors[neighborCount], in vec4 curNeighborColors[neighborCount],
 in float preNeighborDepths[neighborCount], in float curNeighborDepths[neighborCount], vec2 velocity)
{
	//use an arbritary value to determine if there's been a falloff or occlusion

	//use the closest depth instead?
	vec4 preColorMax = MaxColors(preNeighborColors);
	vec4 preColorMin = MinColors(preNeighborColors);

	vec4 curColorMax = MaxColors(curNeighborColors);
	vec4 curColorMin = MinColors(curNeighborColors);

	vec2 preMinMaxDepths = MinMaxDepths(preNeighborDepths);
	vec2 curMinMaxDepths = MinMaxDepths(curNeighborDepths);

	float bestDepth = min(preMinMaxDepths.x, curMinMaxDepths.x); //get the closest

	vec4 res = vec4(0);

	//if highest depth > the fall off range and < the occlusion range. also if velocity isn't too high
	if(bestDepth > depthOcclusionFactor && bestDepth < depthFalloffFactor)
	{
		float test = smoothstep(depthOcclusionFactor, depthFalloffFactor, bestDepth);// * length(velocity);
		res = mix(preNeighborColors[2], curNeighborColors[2], test);
	}

	else
	{
		res = curNeighborColors[2];
	}

	return res;
}

#version 440

in defaultBlock
{
	vec4 position;
	vec2 uv;
} inBlock;

layout(std140, binding = 0) uniform defaultSettings
{
	mat4		projection;
	mat4		view;
	mat4		translation;
	vec2		resolution;
	vec2		mousePosition;
	float		deltaTime;
	float		totalTime;
	float 		framesPerSecond;
	uint		totalFrames;
};

layout(std140, binding = 1) uniform velocitySettings
{
	mat4		previousProjection;
	mat4		previousView;
	mat4 		previousTranslation;

	mat4 		currentView;
};

layout(std140, binding = 2) uniform taaSettings
{
	//velocity
	float velocityScale;

	//SMAA
	float SMAAWeightFactor;
	//Inside
	float feedbackFactor;
	//Custom
	float depthFalloffFactor;
	float depthOcclusionFactor;
	float maxDepthFalloff;
	uint currentResolve;
};

layout(binding = 4) uniform jitterSettings
{
	vec2 haltonSequence[128];
	float haltonScale;
	uint numSamples;
};

out vec4 outColor;

layout(binding = 0) uniform sampler2D currentColorTex;
layout(binding = 1) uniform sampler2D currentDepthTex;

layout(binding = 2) uniform sampler2D previousColorTex;
layout(binding = 3) uniform sampler2D previousDepthTex;

layout(binding = 4) uniform sampler2D velocityTex;

const vec2 kOffsets3x3[9] =
{
	vec2(-1, -1), //upper left
	vec2( 0, -1), //up
	vec2( 1, -1), //upper right
	vec2(-1,  0), //left
	vec2( 0,  0), // K
	vec2( 1,  0), //right
	vec2(-1,  1), //lower left
	vec2( 0,  1), //down
	vec2( 1,  1), //lower right
}; //k is index 4


// Number of neighbors.
const uint kNeighborsCount = 9;

//we can cut this down to 4
const vec2 kOffsets2x2[5] =
{
	vec2(-1, 0), //left
	vec2(0, -1), //up
	vec2( 0,  0), // K
	vec2(1, 0), //right
	vec2(0, 1) //down
}; //k is index 3

const uint neighborCount = 5;

vec2 GetClosestUV(in sampler2D depths)
{
	vec2 deltaRes = vec2(1.0 / resolution.x, 1.0 / resolution.y);
	vec2 closestUV = inBlock.uv;
	float closestDepth = 1.0f;

	for(uint iter = 0; iter < kNeighborsCount; iter++)
	{
		vec2 newUV = inBlock.uv + (kOffsets3x3[iter] * deltaRes);

		float depth = texture2D(depths, newUV).x;

		if(depth < closestDepth)
		{
			closestDepth = depth;
			closestUV = newUV;
		}
	}

	return closestUV;
}

vec2 MinMaxDepths(in float neighborDepths[kNeighborsCount])
{
	float minDepth = neighborDepths[0];
	float maxDepth = neighborDepths[0];

	for(int iter = 1; iter < kNeighborsCount; iter++)
	{
		minDepth = min(minDepth, neighborDepths[iter]);
		minDepth = max(maxDepth, neighborDepths[iter]);
	}

	return vec2(minDepth, maxDepth);
}

vec4 MinColors(in vec4 neighborColors[neighborCount])
{
	vec4 minColor = neighborColors[0];

	for(int iter = 1; iter < neighborCount; iter++)
	{
		minColor = min(minColor, neighborColors[iter]);
	}

	return minColor;
}

vec4 MaxColors(in vec4 neighborColors[neighborCount])
{
	vec4 maxColor = neighborColors[0];

	for(int iter = 1; iter < neighborCount; iter++)
	{
		maxColor = max(maxColor, neighborColors[iter]);
	}

	return maxColor;
}

vec4 MinColors2(in vec4 neighborColors[kNeighborsCount])
{
	vec4 minColor = neighborColors[0];

	for(int iter = 1; iter < neighborCount; iter++)
	{
		minColor = min(minColor, neighborColors[iter]);
	}

	return minColor;
}

vec4 MaxColors2(in vec4 neighborColors[kNeighborsCount])
{
	vec4 maxColor = neighborColors[0];

	for(int iter = 1; iter < neighborCount; iter++)
	{
		maxColor = max(maxColor, neighborColors[iter]);
	}

	return maxColor;
}

vec4 ConstrainHistory(vec4 neighborColors[neighborCount])
{
	vec4 previousColorMin = MinColors(neighborColors);
	vec4 previousColorMax = MaxColors(neighborColors);

	//vec4 constrainedHistory = vec4(0);
	return clamp(neighborColors[2], previousColorMin, previousColorMax);
}

// note: clips towards aabb center + p.w
vec4 clip_aabb(vec3 colorMin, vec3 colorMax, vec4 currentColor, vec4 previousColor)
{
	vec3 p_clip = 0.5 * (colorMax + colorMin);
	vec3 e_clip = 0.5 * (colorMax - colorMin);
	vec4 v_clip = previousColor - vec4(p_clip, currentColor.a);
	vec3 v_unit = v_clip.rgb / e_clip;
	vec3 a_unit = abs(v_unit);
	float ma_unit = max(a_unit.x, max(a_unit.y, a_unit.z));
	if (ma_unit > 1.0)
	{
		return vec4(p_clip, currentColor.a) + v_clip / ma_unit;
	}
	else
	{
		return previousColor;// point inside aabb
	}
}

vec4 SMAAResolve(float weight, vec2 velo, sampler2D currColorTex, sampler2D prevColorTex)
{
	vec4 currentColor = texture2D(currColorTex, inBlock.uv);
	vec4 previousColor = texture2D(prevColorTex, inBlock.uv + velo);

	float delta = abs(currentColor.a * currentColor.a - previousColor.a * previousColor.a) / 5.0;
	weight = 0.5 * clamp(1.0 - sqrt(delta) * SMAAWeightFactor, 0, 1);

	return mix(currentColor, previousColor, weight);
}

vec4 InsideResolve(vec2 velocity, vec4 currentColor)
{
	vec2 deltaRes = vec2(1.0 / resolution.x, 1.0 / resolution.y);

	//1. clamp current color to the min/max of 4 steaps and teh current texel
	vec4 previousColors[neighborCount];

	for(uint iter = 0; iter < neighborCount; iter++)
	{
		vec2 newUV = inBlock.uv + (kOffsets2x2[iter] * deltaRes);

		previousColors[iter] = texture2D(previousColorTex, newUV + velocity);
	}

	//the faster it goes, the less we need to lean on TAA?
	float testVel = feedbackFactor - (length(velocity) * velocityScale);
	if(length(velocity) == 0) //if not moving then use feedbackFactor
	{
		testVel = 0;
	}

	return mix(currentColor, ConstrainHistory(previousColors), testVel);
}

vec4 Inside2Resolve(sampler2D currColorTex, sampler2D prevColorTex, vec2 velocity)
{
	vec2 deltaRes = vec2(1.0 / resolution.x, 1.0 / resolution.y);

	vec4 current3x3Colors[kNeighborsCount];
	vec4 previous3x3Colors[kNeighborsCount];

	for(uint iter = 0; iter < kNeighborsCount; iter++)
	{
		vec2 newUV = inBlock.uv + (kOffsets3x3[iter] * deltaRes);

		current3x3Colors[iter] = texture2D(currColorTex, newUV);

		previous3x3Colors[iter] = texture2D(prevColorTex, newUV + velocity);
	}

	vec4 rounded3x3Min = MinColors2(current3x3Colors);
	vec4 rounded3x3Max = MaxColors2(previous3x3Colors);

///////////////////////////////////////////////////////////////////////////////
	vec4 current2x2Colors[neighborCount];
	vec4 previous2x2Colors[neighborCount];
	for(uint iter = 0; iter < neighborCount; iter++)
	{
		vec2 newUV = inBlock.uv + (kOffsets2x2[iter] * deltaRes);

		current2x2Colors[iter] = texture2D(currColorTex, newUV);

		previous2x2Colors[iter] = texture2D(prevColorTex, newUV + velocity);
	}

	vec4 min2 = MinColors(current2x2Colors);
	vec4 max2 = MaxColors(previous2x2Colors);

	//mix the 3x3 and 2x2 min maxes together
	vec4 mixedMin = mix(rounded3x3Min, min2, 0.5);
	vec4 mixedMax = mix(rounded3x3Max, max2, 0.5);

	float testVel = feedbackFactor - (length(velocity) * velocityScale);
	return mix(current2x2Colors[2], clip_aabb(mixedMin.rgb, mixedMax.rgb, current2x2Colors[2], ConstrainHistory(previous2x2Colors)), testVel);
}

vec4 Custom2Resolve(in float preNeighborDepths[kNeighborsCount], in float curNeighborDepths[kNeighborsCount], vec2 velocity)
{
	//use the closest depth instead?
	vec2 preMinMaxDepths = MinMaxDepths(preNeighborDepths);
	vec2 curMinMaxDepths = MinMaxDepths(curNeighborDepths);

	float highestDepth = min(preMinMaxDepths.x, curMinMaxDepths.x); //get the furthest
	float lowestDepth = max(preMinMaxDepths.x, curMinMaxDepths.x); //get the closest

	float depthFalloff = abs(highestDepth - lowestDepth);

	vec4 res = vec4(0);

	//float testVel = feedbackFactor - (length(velocity) * velocityScale);
	vec4 taa = Inside2Resolve(currentColorTex, previousColorTex, velocity);

	float averageDepth = 0;
	for(uint iter = 0; iter < kNeighborsCount; iter++)
	{
		averageDepth += curNeighborDepths[iter];
	}

	averageDepth /= kNeighborsCount;

	//weigh depth here. inside2 already weighs velocity
	if (lowestDepth > depthOcclusionFactor && highestDepth < depthFalloffFactor)
	{
		res = taa; //blur everything within this range
	}
	//for dithered edges, detect if the adge has been dithered? 
	//use a 3x3 grid to see if anyhting around it has high enough depth?
	else if(averageDepth < maxDepthFalloff)
	{
		res = taa;//vec4(1, 0, 0, 1);
	}

	else
	{
		res = texture2D(currentColorTex, inBlock.uv);;
	}

	return res;
}

void main()
{
	vec4 currentColors[kNeighborsCount];
	float currentDepths[kNeighborsCount];

	vec4 previousColors[kNeighborsCount];
	float previousDepths[kNeighborsCount];

	float weight = 0;

	vec2 deltaRes = vec2(1.0 / resolution.x, 1.0 / resolution.y);

	vec2 velocity = texture2D(velocityTex, inBlock.uv).rg;

	vec2 closestVec = -texture2D(velocityTex, GetClosestUV(currentDepthTex)).rg;

	for(uint iter = 0; iter < kNeighborsCount; iter++)
	{
		vec2 newUV = inBlock.uv + (kOffsets3x3[iter] * deltaRes);

		currentColors[iter] = texture2D(currentColorTex, newUV);
		currentDepths[iter] = texture2D(currentDepthTex, newUV).x;

		previousColors[iter] = texture2D(previousColorTex, newUV + closestVec);
		previousDepths[iter] = texture2D(previousDepthTex, newUV + closestVec).x;
	}

	switch(currentResolve)
	{
		case 0:
		{
			outColor = SMAAResolve(weight, closestVec, currentColorTex, previousColorTex);
			break;
		}

		case 1:
		{
			outColor = InsideResolve(closestVec, currentColors[5]);
			break;
		}
		case 2:
		{
			outColor = Inside2Resolve(currentColorTex, previousColorTex, closestVec);
			break;
		}

		case 3:
		{
			outColor = Custom2Resolve(previousDepths, currentDepths, closestVec);
			break;
		}

		case 4:
		{
			float test = feedbackFactor - (length(velocity) * velocityScale);
			if(test >= feedbackFactor)
			{
				test = 0;
			}
			outColor = vec4(test, 0, 0, 1);
			//outColor = texture2D(currentColorTex, UnJitter(inBlock.uv, totalFrames, true, currentDepths[2]));
			break;
		}
	}
}